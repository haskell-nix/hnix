name: "Nixpkgs, Linux, main"

# When to trigger builds
on:
  # On Git changes in PR
  pull_request:
  # On Git changes of the master
  push:
    branches:
      - master
  schedule:
    # Every day at 03:45
    - cron: "45 03 * * *"


env:
  ###
  ### NOTE: Table example of the provided build configuration keys
  ### Infrastructure uses `build.sh` API, which uses `default.nix` API, which exposes the almost literal Nixpkgs Haskell Lib API wich was abstracted for use outside of Nix language.
  ###
  ### Documentation of this settings is mosly in `default.nix`, since most settings it Nixpkgs related
  ### and the other part of keys explained in `build.sh`, since those address external procedures aound the builds.
  ### Additional documentation is in Nixpkgs Haskell.lib: https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/haskell-modules/lib.nix
  ###
  useRev: "true"
  rev: "nixos-unstable"
  # Register and use Cachix account
  cachixAccount: "haskell-with-nixpkgs"
  # GitHub secret
  CACHIX_SIGNING_KEY: ${{ secrets.CACHIX_SIGNING_KEY }}
  allowInconsistentDependencies: "false"
  doJailbreak: "false"
  doCheck: "true"
  sdistTarball: "false"
  buildFromSdist: "false"
  buildStrictly: "false"
  failOnAllWarnings: "false"
  enableDeadCodeElimination: "false"
  disableOptimization: "true"
  linkWithGold: "true"
  enableLibraryProfiling: "false"
  enableExecutableProfiling: "false"
  doTracing: "false"
  enableDWARFDebugging: "false"
  doStrip: "false"
  enableSharedLibraries: "true"
  enableStaticLibraries: "false"
  enableSharedExecutables: "false"
  justStaticExecutables: "false"
  enableSeparateBinOutput: "false"
  checkUnusedPackages: "false"
  doHaddock: "false"
  doHyperlinkSource: "false"
  doCoverage: "false"
  doBenchmark: "false"
  generateOptparseApplicativeCompletions: "false"
  executableNamesToShellComplete: '[ "replaceWithExecutableName" ]'


jobs:

  # NOTE: Basic example
  build10:
    name: "NixOS-unstable channel, default GHC (8.8.3)"
    runs-on: ubuntu-latest
    steps:
    - name: Git checkout
      uses: actions/checkout@v2
    - name: Install Nix
      uses: cachix/install-nix-action@v10
    - name: Install Cachix
      uses: cachix/cachix-action@v6
      with:
        name: ${{ env.cachixAccount }}
    - name: Determined Nix-build
      env:
        # nixos-unstable is a nixpkgs-upstable that passed a number of upstream CI and quality checks, it is essentially a current branch while also receives stable updates fitting for our CI checkups with current Nixpkgs.
        # Note that Nix nature is purely functional lazy language, it is referentially transparent, reproducible (deterministic) builds, that means that just as in the type system - any the Nix build failures properly cascade through the Nixpkgs tree graph branch, so particular `master` broken checkouts would properly refuse/would not be able to build parts of Nixpkgs tree graph. So the Nix builds are pretty brittle, do not be ashamed to make Nixpkgs builds optional (`continue-on-error: true`), or set them to the latest stable NixOS Nixpkgs release.
        useRev: "true"
        rev: "nixos-unstable"
      run: ./build.sh


  # NOTE: Example of customization using Nixpkgs Haskell Lib API
  build20:
    name: "Release-quality test, SDist, Optimizations, Benchmark, Haddock, GHC 8.10.1"
    runs-on: ubuntu-latest
    # Matrix of builds for multiple subprojects in a monorepo
    strategy:
      matrix:
        packageRoots: [ ./ ]
    steps:
    - name: Git checkout
      uses: actions/checkout@v2
    - name: Install Nix
      uses: cachix/install-nix-action@v10
    - name: Install Cachix
      uses: cachix/cachix-action@v6
      with:
        name: ${{ env.cachixAccount }}
    - name: Determined Nix-build
      env:
        useRev: "true"
        rev: "nixos-unstable"
        compiler: "ghc8101"
        buildFromSdist: "true"
        linkWithGold: "true"
        doHaddock: "true"
        doHyperlinkSource: "true"
        disableOptimization: "false"
        enableDeadCodeElimination: "true"
        doBenchmark: "true"
        generateOptparseApplicativeCompletions: "false"
        # packageRoot for CI builds can be just a paths, since CI uses remote Git repo that is already filtered with local .gitignore's
        packageRoot: ${{ matrix.packageRoots }}
      run: ./build.sh


  # NOTE: Build on latest stable NixOS release
  build30:
    name: "NixOS 20.03 stable channel, default GHC (8.8.3)"
    runs-on: ubuntu-latest
    steps:
    - name: Git checkout
      uses: actions/checkout@v2
    - name: Install Nix
      uses: cachix/install-nix-action@v10
    - name: Install Cachix
      uses: cachix/cachix-action@v6
      with:
        name: ${{ env.cachixAccount }}
    - name: Determined Nix-build
      env:
        rev: "nixos-20.03"
      run: ./build.sh


  # NOTE: This would additionally test that the Nix shell customization of the project works.
  # By default *this setup provides local hoogle and generates database of the documetation for the project and its dependencies
  build40:
    name: "Nix-shell & supplied locall project Hoogle DB"
    runs-on: ubuntu-latest
    steps:
    - name: Git checkout
      uses: actions/checkout@v2
    - name: Install Nix
      uses: cachix/install-nix-action@v10
    - name: Install Cachix
      uses: cachix/cachix-action@v6
      with:
        name: ${{ env.cachixAccount }}
    - name: Nix-shell
      run: nix-shell --pure --command 'echo "Evaluated, loaded and entered $IN_NIX_SHELL Nix shell env."'
    - name: Local Hoogle DB for the project development and tooling
      run: nix-shell --pure --command 'hoogle True'


  # Other samples of tests used in the project see in the directory
